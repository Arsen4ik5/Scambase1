
import logging
import random
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor

API_TOKEN = 'YOUR_API_TOKEN'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
ADMIN_ID = 7451036519  # ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

reports = {}
admins = {ADMIN_ID}
guarantees = {}
scammers = set()

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        "/report (—é–∑–µ—ÄID) (–ø—Ä–∏—á–∏–Ω–∞) - –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É\n"
                        "/acceptreport (–Ω–æ–º–µ—Ä) (—Ä–∞–Ω–≥) - –ü—Ä–∏–Ω—è—Ç—å –∂–∞–ª–æ–±—É\n"
                        "/addadm (—é–∑–µ—ÄID/username) - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
                        "/check (—é–∑–µ—ÄID/username) - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é\n"
                        "/checkmy - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å\n"
                        "/addgarant (—é–∑–µ—ÄID/username) - –°–¥–µ–ª–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–æ–º")

def get_user_id(param: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π ID."""
    if param.isdigit():
        return int(param)
    else:
        user = bot.get_user(param)  # –≠—Ç–∞ —á–∞—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —É—Ç–æ—á–Ω—è—Ç—å –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ username
        return user.id if user else None

@dp.message_handler(commands=['report'])
async def cmd_report(message: types.Message):
    args = message.get_args().split()
    if len(args) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /report (—é–∑–µ—ÄID/username) (–ø—Ä–∏—á–∏–Ω–∞)")
        return
    reported_user_id = get_user_id(args[0])
    if reported_user_id is None:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.")
        return
    reason = ' '.join(args[1:])
    report_id = random.randint(10000, 99999)
    reports[report_id] = {'user_id': reported_user_id, 'status': 'pending', 'reason': reason, 'rank': None}
    await message.reply(f'–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –ø–æ–¥–∞–Ω–∞. –ù–æ–º–µ—Ä –∂–∞–ª–æ–±—ã: {report_id}')

@dp.message_handler(commands=['acceptreport'])
async def cmd_accept_report(message: types.Message):
    if message.from_user.id not in admins:
        await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    args = message.get_args().split()
    if len(args) < 2:
        await message.reply('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∂–∞–ª–æ–±—ã –∏ —Ä–∞–Ω–≥ (—Å–∫–∞–º–µ—Ä, –ø–µ—Ç—É—Ö, –≥–∞—Ä–∞–Ω—Ç).')
        return
    try:
        report_id = int(args[0])
        rank = args[1].lower()
    except ValueError:
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–æ–º–µ—Ä –∂–∞–ª–æ–±—ã ‚Äî —ç—Ç–æ —á–∏—Å–ª–æ.')
        return
    if report_id in reports:
        reports[report_id]['status'] = 'accepted'
        reports[report_id]['rank'] = rank
        if rank == '—Å–∫–∞–º–µ—Ä':
            scammers.add(reports[report_id]['user_id'])
        elif rank == '–≥–∞—Ä–∞–Ω—Ç':
            guarantees[reports[report_id]['user_id']] = True
        await message.reply(f'–ñ–∞–ª–æ–±–∞ {report_id} –ø—Ä–∏–Ω—è—Ç–∞. –†–∞–Ω–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {rank}.')
    else:
        await message.reply('–¢–∞–∫–æ–π –∂–∞–ª–æ–±—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')

@dp.message_handler(commands=['addadm'])
async def cmd_add_admin(message: types.Message):
    if message.from_user.id not in admins:
        await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    args = message.get_args().split()
    if len(args) < 1:
        await message.reply('–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ username –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.')
        return
    new_admin = get_user_id(args[0])
    if new_admin is None:
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return
    admins.add(new_admin)
    await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.')

@dp.message_handler(commands=['check'])
async def cmd_check(message: types.Message):
    args = message.get_args().split()
    if len(args) < 1:
        await message.reply('–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.')
        return
    check_user_id = get_user_id(args[0])
    if check_user_id is None:
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return
    rank = '–ø–µ—Ç—É—Ö'
    if check_user_id in scammers:
        rank = '—Å–∫–∞–º–µ—Ä'
    elif check_user_id in guarantees:
        rank = '–≥–∞—Ä–∞–Ω—Ç'
    # –ü–æ–ª—É—á–∞–µ–º username
    username = await get_username(check_user_id)
    await message.reply(f"üîé–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n\nüî•–†–µ–ø—É—Ç–∞—Ü–∏—è: {rank}\n\nüÜî–ê–π–¥–∏: {check_user_id}\nüßê–Æ–∑–µ—Ä: @{username}")

async def get_username(user_id):
    try:
        user = await bot.get_chat(user_id)
        return user.username if user.username else "–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"
    except:
        return "–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"

@dp.message_handler(commands=['checkmy'])
async def cmd_check_my_status(message: types.Message):
    user_id = message.from_user.id
    rank = '–ù–µ—Ç—É –≤ –±–∞–∑–µ'
    if user_id in scammers:
        rank = '—Å–∫–∞–º–µ—Ä'
    elif user_id in guarantees:
        rank = '–≥–∞—Ä–∞–Ω—Ç'
    username = await get_username(user_id)
    await message.reply(f"üîé–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n\nüî•–†–µ–ø—É—Ç–∞—Ü–∏—è: {rank}\n\nüÜî–ê–π–¥–∏: {user_id}\nüßê–Æ–∑–µ—Ä: @{username}")

@dp.message_handler(commands=['addgarant'])
async def cmd_add_garant(message: types.Message):
    args = message.get_args().split()
    if len(args) < 1:
        await message.reply('–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ username –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥–∞—Ä–∞–Ω—Ç.')
        return
    garant_id = get_user_id(args[0])
    if garant_id is None:
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return
    guarantees[garant_id] = True
    await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {garant_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –≥–∞—Ä–∞–Ω—Ç.')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
