import telebot
import sqlite3

API_TOKEN = '7994365938:AAGHSzJZ1Vp8Hl8SKNeIecfre3wLMvnTR3s'
ADMIN_ID = []
OWNER_ID = [6321157988, 797141384]
VOLUNTEER_ID = []
DIRECTOR_ID = []

bot = telebot.TeleBot(API_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('bot_database.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
cursor.execute('''
CREATE TABLE IF NOT EXISTS admins (
    user_id INTEGER PRIMARY KEY
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS guarantees (
    user_id INTEGER PRIMARY KEY
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS scammers (
    user_id INTEGER PRIMARY KEY,
    evidence TEXT,
    reason TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS volunteer (
    user_id INTEGER PRIMARY KEY
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS director (
    user_id INTEGER PRIMARY KEY
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS bans (
    user_id INTEGER,
    time INTEGER,
    reason TEXT,
    PRIMARY KEY (user_id, time)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS mutes (
    user_id INTEGER,
    reason TEXT,
    time INTEGER,
    PRIMARY KEY (user_id, time)
)
''')

conn.commit()

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, 
                 """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
                 /report (—é–∑–µ—ÄID) (–ø—Ä–∏—á–∏–Ω–∞) - –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É
                 /acceptreport (–Ω–æ–º–µ—Ä) (—Ä–∞–Ω–≥) - –ü—Ä–∏–Ω—è—Ç—å –∂–∞–ª–æ–±—É
                 /addadm (—é–∑–µ—ÄID) - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
                 /check (—é–∑–µ—ÄID) - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é
                 /checkmy - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å
                 /addgarant (—é–∑–µ—ÄID) - –°–¥–µ–ª–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–æ–º
                 /delbase (—é–∑–µ—ÄID) (–ø—Ä–∏—á–∏–Ω–∞) - –£–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã
                 /scam (—é–∑–µ—Ä–Ω–µ–π–º) (–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞) (–ø—Ä–∏—á–∏–Ω–∞) - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∫–∞–º –±–∞–∑—É
                 /trust (—é–∑–µ—Ä–Ω–µ–π–º) - –í—ã–¥–∞—Ç—å —Ç—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                 /revoke_trust (—é–∑–µ—Ä–Ω–µ–π–º) - –ó–∞–±—Ä–∞—Ç—å —Ç—Ä–∞—Å—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                 /addvolunteer (—é–∑–µ—ÄID) - –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞
                 /adddirector (—é–∑–µ—ÄID) - –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
                 /ban (—é–∑–µ—ÄID) (–≤—Ä–µ–º—è) (–ø—Ä–∏—á–∏–Ω–∞) - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                 /unban (—é–∑–µ—ÄID) - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                 /mute (—é–∑–µ—ÄID) (–ø—Ä–∏—á–∏–Ω–∞) - –ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                 /unmute (—é–∑–µ—ÄID) - –£–±—Ä–∞—Ç—å –º—É—Ç
                 /warn (—é–∑–µ—ÄID) (–ø—Ä–∏—á–∏–Ω–∞) - –í—ã–¥–∞—Ç—å –≤–∞—Ä–Ω
                 /delmute (—é–∑–µ—ÄID) (–ø—Ä–∏—á–∏–Ω–∞) (–≤—Ä–µ–º—è) - –ó–∞–º—É—Ç–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è
                 """)

# –ü–æ–ª—É—á–µ–Ω–∏–µ Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_id(param):
    try:
        if param.isdigit():
            return int(param)
        else:
            user = bot.get_chat(param)
            return user.id if user else None
    except Exception:
        return None

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥
def user_has_permission(message, role_list):
    return message.from_user.id in role_list

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ
def user_exists(user_id, table):
    cursor.execute(f'SELECT user_id FROM {table} WHERE user_id = ?', (user_id,))
    return cursor.fetchone() is not None

# –ö–æ–º–∞–Ω–¥–∞ /checkmy
@bot.message_handler(commands=['checkmy'])
def cmd_check_my_status(message):
    user_id = message.from_user.id
    rank = check_user_rank(user_id)

    bot.reply_to(message, 
                  f"üîé–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n"
                  f"üî•–†–µ–ø—É—Ç–∞—Ü–∏—è: {rank}\n"
                  f"üÜî–ê–π–¥–∏: {user_id}\n")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞
@bot.message_handler(commands=['addvolunteer'])
def cmd_add_volunteer(message):
    if message.from_user.id not in OWNER_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 1:
        bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã.')
        return

    volunteer_id = get_user_id(args[0])
    if volunteer_id is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    if user_exists(volunteer_id, 'volunteer'):
        bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {volunteer_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º.')
        return

    add_volunteer(volunteer_id)
    bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {volunteer_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –≤–æ–ª–æ–Ω—Ç–µ—Ä.')

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
@bot.message_handler(commands=['adddirector'])
def cmd_add_director(message):
    if message.from_user.id not in OWNER_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 1:
        bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞.')
        return

    director_id = get_user_id(args[0])
    if director_id is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    if user_exists(director_id, 'director'):
        bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {director_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º.')
        return

    add_director(director_id)
    bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {director_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä.')

# –ö–æ–º–∞–Ω–¥–∞ /ban
@bot.message_handler(commands=['ban'])
def cmd_ban(message):
    if message.from_user.id not in OWNER_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 3:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ban (—é–∑–µ—ÄID) (–≤—Ä–µ–º—è) (–ø—Ä–∏—á–∏–Ω–∞)')
        return

    user_to_ban = get_user_id(args[0])
    ban_time = args[1]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, '30' –¥–ª—è 30 –º–∏–Ω—É—Ç
    reason = ' '.join(args[2:])

    if user_to_ban is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    add_ban(user_to_ban, ban_time, reason)
    bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_ban} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {ban_time} –º–∏–Ω—É—Ç(—ã). –ü—Ä–∏—á–∏–Ω–∞: {reason}')

# –ö–æ–º–∞–Ω–¥–∞ /unban
@bot.message_handler(commands=['unban'])
def cmd_unban(message):
    if message.from_user.id not in OWNER_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    
    args = message.text.split()[1:]
    if len(args) < 1:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unban (—é–∑–µ—ÄID)')
        return

    user_to_unban = get_user_id(args[0])
    
    if user_to_unban is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    remove_ban(user_to_unban)
    bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_unban} –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.')

# –ö–æ–º–∞–Ω–¥–∞ /mute
@bot.message_handler(commands=['mute'])
def cmd_mute(message):
    if not user_has_permission(message, VOLUNTEER_ID + DIRECTOR_ID + ADMIN_ID):
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 2:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /mute (—é–∑–µ—ÄID) (–ø—Ä–∏—á–∏–Ω–∞)')
        return

    user_to_mute = get_user_id(args[0])
    reason = ' '.join(args[1:])

    if user_to_mute is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    add_mute(user_to_mute, reason)
    bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_mute} –∑–∞–º—É—á–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}')

# –ö–æ–º–∞–Ω–¥–∞ /unmute
@bot.message_handler(commands=['unmute'])
def cmd_unmute(message):
    if message.from_user.id not in OWNER_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 1:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unmute (—é–∑–µ—ÄID)')
        return

    user_to_unmute = get_user_id(args[0])

    if user_to_unmute is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    remove_mute(user_to_unmute)
    bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_unmute} –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω.')

# –ö–æ–º–∞–Ω–¥–∞ /warn
@bot.message_handler(commands=['warn'])
def cmd_warn(message):
    if message.from_user.id not in OWNER_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 2:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /warn (—é–∑–µ—ÄID) (–ø—Ä–∏—á–∏–Ω–∞)')
        return

    user_to_warn = get_user_id(args[0])
    reason = ' '.join(args[1:])

    if user_to_warn is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π

    bot.reply_to(message, f'–í–∞—Ä–Ω –≤—ã–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_to_warn}. –ü—Ä–∏—á–∏–Ω–∞: {reason}')

# –ö–æ–º–∞–Ω–¥–∞ /delmute
@bot.message_handler(commands=['delmute'])
def cmd_delmute(message):
    if message.from_user.id not in OWNER_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 3:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delmute (—é–∑–µ—ÄID) (–ø—Ä–∏—á–∏–Ω–∞) (–≤—Ä–µ–º—è)')
        return

    user_to_mute = get_user_id(args[0])
    reason = args[1]
    time_duration = args[2]  # duration can be processed if needed

    if user_to_mute is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    add_mute(user_to_mute, reason)
    bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_mute} –∑–∞–º—É—á–µ–Ω –∏ —É–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—Ä–∏—á–∏–Ω–∞: {reason}')

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã
def add_volunteer(user_id):
    cursor.execute('INSERT OR IGNORE INTO volunteer (user_id) VALUES (?)', (user_id,))
    conn.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ã
def add_director(user_id):
    cursor.execute('INSERT OR IGNORE INTO director (user_id) VALUES (?)', (user_id,))
    conn.commit()

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–Ω
def add_ban(user_id, time, reason):
    cursor.execute('INSERT OR REPLACE INTO bans (user_id, time, reason) VALUES (?, ?, ?)', (user_id, time, reason))
    conn.commit()

# –£–±–∏—Ä–∞–µ–º –±–∞–Ω
def remove_ban(user_id):
    cursor.execute('DELETE FROM bans WHERE user_id = ?', (user_id,))
    conn.commit()

def add_mute(user_id, reason):
    cursor.execute('INSERT OR REPLACE INTO mutes (user_id, reason, time) VALUES (?, ?, ?)', (user_id, reason, 5))  # Time can be configured
    conn.commit()

def remove_mute(user_id):
    cursor.execute('DELETE FROM mutes WHERE user_id = ?', (user_id,))
    conn.commit()

def check_user_rank(user_id):
    if user_id in get_scammers():
        return '—Å–∫–∞–º–µ—Ä'
    elif user_id in get_guarantees():
        return '–≥–∞—Ä–∞–Ω—Ç'
    elif user_id in get_admins():
        return '–∞–¥–º–∏–Ω'
    elif user_id in get_volunteers():
        return '–≤–æ–ª–æ–Ω—Ç—ë—Ä'
    elif user_id in get_directors():
        return '–¥–∏—Ä–µ–∫—Ç–æ—Ä'
    return '–ù–µ—Ç—É –≤ –±–∞–∑–µ'

def get_guarantees():
    cursor.execute('SELECT user_id FROM guarantees')
    return {row[0] for row in cursor.fetchall()}

def get_scammers():
    cursor.execute('SELECT user_id FROM scammers')
    return {row[0] for row in cursor.fetchall()}

def get_volunteers():
    cursor.execute('SELECT user_id FROM volunteer')
    return {row[0] for row in cursor.fetchall()}

def get_directors():
    cursor.execute('SELECT user_id FROM director')
    return {row[0] for row in cursor.fetchall()}

def get_admins():
    cursor.execute('SELECT user_id FROM admins')
    return {row[0] for row in cursor.fetchall()}

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"An error occurred: {e}")
