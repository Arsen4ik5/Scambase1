import telebot
import sqlite3
import random

API_TOKEN = '7994365938:AAGHSzJZ1Vp8Hl8SKNeIecfre3wLMvnTR3s'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = [6321157988]
OWNER_ID = [797141384]
VOLUNTEER_ID = []
DIRECTOR_ID = []
GARANT_ID = []

bot = telebot.TeleBot(API_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('angeless_database.txt', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
cursor.execute('''
CREATE TABLE IF NOT EXISTS admins (
    user_id INTEGER PRIMARY KEY
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS guarantees (
    user_id INTEGER PRIMARY KEY
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS scammers (
    user_id INTEGER PRIMARY KEY,
    evidence TEXT,
    reason TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS volunteer (
    user_id INTEGER PRIMARY KEY
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS director (
    user_id INTEGER PRIMARY KEY
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS bans (
    user_id INTEGER,
    time INTEGER,
    reason TEXT,
    PRIMARY KEY (user_id, time)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS mutes (
    user_id INTEGER,
    reason TEXT,
    time INTEGER,
    PRIMARY KEY (user_id, time)
)
''')

conn.commit()

reports = {}

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, 
                 """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
                 /report (—é–∑–µ—ÄID) (–ø—Ä–∏—á–∏–Ω–∞) - –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É
                 /acceptreport (–Ω–æ–º–µ—Ä) (—Ä–∞–Ω–≥) - –ü—Ä–∏–Ω—è—Ç—å –∂–∞–ª–æ–±—É
                 /addadm (—é–∑–µ—ÄID) - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
                 /check (—é–∑–µ—ÄID) - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é
                 /checkmy - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å
                 /addgarant (—é–∑–µ—ÄID) - –°–¥–µ–ª–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–æ–º
                 /delbase (—é–∑–µ—ÄID) (–ø—Ä–∏—á–∏–Ω–∞) - –£–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã
                 /scam (—é–∑–µ—Ä–Ω–µ–π–º) (–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞) (–ø—Ä–∏—á–∏–Ω–∞) - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∫–∞–º –±–∞–∑—É
                 /trust (—é–∑–µ—Ä–Ω–µ–π–º) - –í—ã–¥–∞—Ç—å —Ç—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                 /revoke_trust (—é–∑–µ—Ä–Ω–µ–π–º) - –ó–∞–±—Ä–∞—Ç—å —Ç—Ä–∞—Å—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è""")

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID
def get_user_id(param):
    try:
        if param.isdigit():
            return int(param)
        else:
            user = bot.get_chat(param)
            return user.id if user else None
    except Exception:
        return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ
def user_exists(user_id, table):
    cursor.execute(f'SELECT user_id FROM {table} WHERE user_id = ?', (user_id,))
    return cursor.fetchone() is not None

@bot.message_handler(commands=['report'])
def cmd_report(message):
    args = message.text.split()[1:]
    if len(args) < 2:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /report (—é–∑–µ—ÄID) (–ø—Ä–∏—á–∏–Ω–∞)")
        return

    reported_user_id = get_user_id(args[0])
    if reported_user_id is None:
        bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.")
        return

    reason = ' '.join(args[1:])
    report_id = random.randint(10000, 99999)
    reports[report_id] = {'user_id': reported_user_id, 'status': 'pending', 'reason': reason, 'rank': None}
    bot.reply_to(message, f'–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –ø–æ–¥–∞–Ω–∞. –ù–æ–º–µ—Ä –∂–∞–ª–æ–±—ã: {report_id}')

@bot.message_handler(commands=['acceptreport'])
def cmd_accept_report(message):
    if message.from_user.id not in get_admins():
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 2:
        bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∂–∞–ª–æ–±—ã –∏ —Ä–∞–Ω–≥ (—Å–∫–∞–º–µ—Ä, –≥–∞—Ä–∞–Ω—Ç).')
        return

    try:
        report_id = int(args[0])
        rank = args[1].lower()
    except ValueError:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–æ–º–µ—Ä –∂–∞–ª–æ–±—ã ‚Äî —ç—Ç–æ —á–∏—Å–ª–æ.')
        return

    if report_id in reports:
        reports[report_id]['status'] = 'accepted'
        reports[report_id]['rank'] = rank

        if rank == '—Å–∫–∞–º–µ—Ä':
            add_to_scammers(reports[report_id]['user_id'], "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–∞ —Å–∫–∞–º", reports[report_id]['reason'])
        elif rank == '–≥–∞—Ä–∞–Ω—Ç':
            add_to_guarantees(reports[report_id]['user_id'])

        bot.reply_to(message, f'–ñ–∞–ª–æ–±–∞ {report_id} –ø—Ä–∏–Ω—è—Ç–∞. –†–∞–Ω–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {rank}.')
    else:
        bot.reply_to(message, '–¢–∞–∫–æ–π –∂–∞–ª–æ–±—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')

@bot.message_handler(commands=['addvolunteer'])
def cmd_add_volunteer(message):
    if message.from_user.id not in OWNER_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 1:
        bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã.')
        return

    volunteer_id = get_user_id(args[0])
    if volunteer_id is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    if user_exists(volunteer_id, 'volunteer'):
        bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {volunteer_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º.')
        return

    add_volunteer(volunteer_id)
    bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {volunteer_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –≤–æ–ª–æ–Ω—Ç–µ—Ä.')

@bot.message_handler(commands=['addadm'])
def cmd_add_admin(message):
    if message.from_user.id not in OWNER_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 1:
        bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.')
        return

    new_admin = get_user_id(args[0])
    if new_admin is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    add_admin(new_admin)
    bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.')

@bot.message_handler(commands=['check'])
def cmd_check(message):
    args = message.text.split()[1:]
    if len(args) < 1:
        bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.')
        return
    
    check_user_id = get_user_id(args[0])
    if check_user_id is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    if check_user_id in get_guarantees():
        bot.reply_to(message, 
                      f"üîé–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n"
                      f"üî•–†–µ–ø—É—Ç–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–µ–Ω –≥–∞—Ä–∞–Ω—Ç–æ–º\n"
                      f"üÜî–ê–π–¥–∏: {check_user_id}\n")
        return

    rank = check_user_rank(check_user_id)
    
    if rank == '—Å–∫–∞–º–µ—Ä':
        evidence, reason = get_scammers_info(check_user_id)
        bot.reply_to(message, 
                      f"üîé–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n"
                      f"üî•–†–µ–ø—É—Ç–∞—Ü–∏—è: {rank}\n"
                      f"üÜî–ê–π–¥–∏: {check_user_id}\n"
                      f"üìù–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {evidence}\n"
                      f"üìã–ü—Ä–∏—á–∏–Ω–∞: {reason}\n")
    elif rank == '–≥–∞—Ä–∞–Ω—Ç':
        bot.reply_to(message, 
                      f"üîé–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n"
                      f"üî•–†–µ–ø—É—Ç–∞—Ü–∏—è: {rank}\n"
                      f"üÜî–ê–π–¥–∏: {check_user_id}\n")
    elif rank in ['–∞–¥–º–∏–Ω', '–¥–∏—Ä–µ–∫—Ç–æ—Ä']:
        bot.reply_to(message, 
                      f"üîé–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n"
                      f"üî•–†–µ–ø—É—Ç–∞—Ü–∏—è: {rank}\n"
                      f"üÜî–ê–π–¥–∏: {check_user_id}\n")
    else:
        bot.reply_to(message, 
                      f"üîé–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n"
                      f"üî•–†–µ–ø—É—Ç–∞—Ü–∏—è: {rank}\n"
                      f"üÜî–ê–π–¥–∏: {check_user_id}\n")

@bot.message_handler(commands=['scam'])
def cmd_scam(message):
    if message.from_user.id not in ADMIN_ID and message.from_user.id not in OWNER_ID and message.from_user.id not in VOLUNTEER_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split(maxsplit=3)
    if len(args) < 4:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /scam (—é–∑–µ—Ä–Ω–µ–π–º) (–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞) (–ø—Ä–∏—á–∏–Ω–∞)')
        return

    username = args[1]
    evidence = args[2]
    reason = args[3]

    scam_user_id = get_user_id(username)
    if scam_user_id is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    add_to_scammers(scam_user_id, evidence, reason)
    
    bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {scam_user_id}) –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É —Å–∫–∞–º–µ—Ä–æ–≤.\n–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {evidence}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}')

@bot.message_handler(commands=['checkmy'])
def cmd_check_my_status(message):
    user_id = message.from_user.id
    
    if user_id in get_guarantees():
        bot.reply_to(message, 
                      f"üîé–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n"
                      f"üî•–†–µ–ø—É—Ç–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–µ–Ω –≥–∞—Ä–∞–Ω—Ç–æ–º\n"
                      f"üÜî–ê–π–¥–∏: {user_id}\n")
        return

    rank = check_user_rank(user_id)

    bot.reply_to(message, 
                  f"üîé–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n"
                  f"üî•–†–µ–ø—É—Ç–∞—Ü–∏—è: {rank}\n"
                  f"üÜî–ê–π–¥–∏: {user_id}\n")

@bot.message_handler(commands=['addgarant'])
def cmd_add_garant(message):
    if message.from_user.id not in ADMIN_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 1:
        bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥–∞—Ä–∞–Ω—Ç.')
        return

    garant_id = get_user_id(args[0])
    if garant_id is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    add_to_guarantees(garant_id)
    bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {garant_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –≥–∞—Ä–∞–Ω—Ç.')

@bot.message_handler(commands=['delbase'])
def cmd_del_base(message):
    if message.from_user.id not in ADMIN_ID and message.from_user.id not in OWNER_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 2:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delbase (—é–∑–µ—ÄID) (–ø—Ä–∏—á–∏–Ω–∞)')
        return

    del_user_id = get_user_id(args[0])
    if del_user_id is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    remove_user(del_user_id)
    bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {del_user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã. –ü—Ä–∏—á–∏–Ω–∞: {" ".join(args[1:])}.')

@bot.message_handler(commands=['trust'])
def cmd_trust(message):
    if message.from_user.id not in OWNER_ID and message.from_user.id not in GARANT_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 1:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /trust (—é–∑–µ—Ä–Ω–µ–π–º)')
        return

    username = args[0]
    trust_user_id = get_user_id(username)
    if trust_user_id is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    if trust_user_id in get_scammers():
        bot.reply_to(message, '–ù–µ–ª—å–∑—è –≤—ã–¥–∞—Ç—å —Ç—Ä–∞—Å—Ç —Å–∫–∞–º–µ—Ä—É.')
        return

    if trust_user_id not in get_guarantees():
        add_to_guarantees(trust_user_id)
        bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} (ID: {trust_user_id}) –≤—ã–¥–∞–Ω —Ç—Ä–∞—Å—Ç.')
    else:
        bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.')

@bot.message_handler(commands=['adddirector'])
def cmd_add_director(message):
    if message.from_user.id not in OWNER_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 1:
        bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞.')
        return

    director_id = get_user_id(args[0])
    if director_id is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    if user_exists(director_id, 'director'):
        bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {director_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º.')
        return

    add_director(director_id)
    bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {director_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä.')

@bot.message_handler(commands=['deldirector'])
def cmd_del_director(message):
    if message.from_user.id not in OWNER_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 1:
        bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤.')
        return

    director_id = get_user_id(args[0])
    if director_id is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    if not user_exists(director_id, 'director'):
        bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {director_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º.')
        return

    remove_director(director_id)
    bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {director_id} —É–¥–∞–ª–µ–Ω –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤.')

@bot.message_handler(commands=['deladmin'])
def cmd_del_admin(message):
    if message.from_user.id not in OWNER_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 1:
        bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.')
        return

    admin_id = get_user_id(args[0])
    if admin_id is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    if not user_exists(admin_id, 'admins'):
        bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
        return

    remove_admin(admin_id)
    bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.')

@bot.message_handler(commands=['ban'])
def kick_user(message):
    if message.from_user.id not in OWNER_ID and message.from_user.id not in DIRECTOR_ID and message.from_user.id not in ADMIN_ID:
        bot.reply_to(message, "[‚ùå] –û—à–∏–±–∫–∞")
        return

    if message.reply_to_message:
        chat_id = message.chat.id
        user_id = message.reply_to_message.from_user.id
        user_status = bot.get_chat_member(chat_id, user_id).status
        if user_status == 'administrator' or user_status == 'creator':
            bot.reply_to(message, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        else:
            bot.kick_chat_member(chat_id, user_id)
            bot.reply_to(
                message, 
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.username} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.")
    else:
        bot.reply_to(
            message,
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç "
            "–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å.")

@bot.message_handler(commands=['untrust'])
def cmd_revoke_trust(message):
    if message.from_user.id not in GARANT_ID and message.from_user.id not in OWNER_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 1:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /revoke_trust (—é–∑–µ—Ä–Ω–µ–π–º)')
        return

    username = args[0]
    revoke_user_id = get_user_id(username)
    if revoke_user_id is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    if revoke_user_id not in get_guarantees():
        bot.reply_to(message, '–£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç—Ä–∞—Å—Ç–∞.')
        return

    remove_from_guarantees(revoke_user_id)
    bot.reply_to(message, f'–¢—Ä–∞—Å—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {revoke_user_id}) –∑–∞–±—Ä–∞–Ω.')

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–æ–ª–æ–Ω—Ç—ë—Ä—ã
def add_volunteer(user_id):
    cursor.execute('INSERT OR IGNORE INTO volunteer (user_id) VALUES (?)', (user_id,))
    conn.commit()

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤
def remove_volunteer(user_id):
    cursor.execute('DELETE FROM volunteer WHERE user_id = ?', (user_id,))
    conn.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ã
def add_director(user_id):
    cursor.execute('INSERT OR IGNORE INTO director (user_id) VALUES (?)', (user_id,))
    conn.commit()

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤
def remove_director(user_id):
    cursor.execute('DELETE FROM director WHERE user_id = ?', (user_id,))
    conn.commit()

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–Ω
def add_ban(user_id, time, reason):
    cursor.execute('INSERT OR REPLACE INTO bans (user_id, time, reason) VALUES (?, ?, ?)', (user_id, time, reason))
    conn.commit()

# –£–±–∏—Ä–∞–µ–º –±–∞–Ω
def remove_ban(user_id):
    cursor.execute('DELETE FROM bans WHERE user_id = ?', (user_id,))
    conn.commit()

def add_mute(user_id, reason):
    cursor.execute('INSERT OR REPLACE INTO mutes (user_id, reason, time) VALUES (?, ?, ?)', (user_id, reason, 5))  # Time can be configured
    conn.commit()

def remove_mute(user_id):
    cursor.execute('DELETE FROM mutes WHERE user_id = ?', (user_id,))
    conn.commit()

def add_admin(user_id):
    cursor.execute('INSERT OR IGNORE INTO admins (user_id) VALUES (?)', (user_id,))
    conn.commit()

def remove_admin(user_id):
    cursor.execute('DELETE FROM admins WHERE user_id = ?', (user_id,))
    conn.commit()

def check_user_rank(user_id):
    if user_id in get_scammers():
        return '—Å–∫–∞–º–µ—Ä'
    elif user_id in get_guarantees():
        return '–≥–∞—Ä–∞–Ω—Ç'
    elif user_id in get_admins():
        return '–∞–¥–º–∏–Ω'
    elif user_id in get_volunteers():
        return '–≤–æ–ª–æ–Ω—Ç—ë—Ä'
    elif user_id in get_directors():
        return '–¥–∏—Ä–µ–∫—Ç–æ—Ä'
    return '–ù–µ—Ç—É –≤ –±–∞–∑–µ'

def get_guarantees():
    cursor.execute('SELECT user_id FROM guarantees')
    return {row[0] for row in cursor.fetchall()}

def get_scammers():
    cursor.execute('SELECT user_id FROM scammers')
    return {row[0] for row in cursor.fetchall()}

def get_volunteers():
    cursor.execute('SELECT user_id FROM volunteer')
    return {row[0] for row in cursor.fetchall()}

def get_directors():
    cursor.execute('SELECT user_id FROM director')
    return {row[0] for row in cursor.fetchall()}

def get_admins():
    cursor.execute('SELECT user_id FROM admins')
    return {row[0] for row in cursor.fetchall()}

def add_to_guarantees(user_id):
    cursor.execute('INSERT OR IGNORE INTO guarantees (user_id) VALUES (?)', (user_id,))
    conn.commit()

def remove_from_guarantees(user_id):
    cursor.execute('DELETE FROM guarantees WHERE user_id = ?', (user_id,))
    conn.commit()

def add_to_scammers(user_id, evidence, reason):
    cursor.execute('INSERT OR IGNORE INTO scammers (user_id, evidence, reason) VALUES (?, ?, ?)', (user_id, evidence, reason))
    conn.commit()

def remove_user(user_id):
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    remove_volunteer(user_id)
    remove_admin(user_id)
    remove_director(user_id)
    remove_from_guarantees(user_id)
    cursor.execute('DELETE FROM scammers WHERE user_id = ?', (user_id,))
    cursor.execute('DELETE FROM bans WHERE user_id = ?', (user_id,))
    cursor.execute('DELETE FROM mutes WHERE user_id = ?', (user_id,))
    conn.commit()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"An error occurred: {e}")
