import telebot
import sqlite3
import random

API_TOKEN = '7275319279:AAGZh_GzI4iO5Vsb3lcBsF0RLUq5Meh-yh8'
ADMIN_ID = []
OWNER_ID = [6321157988, 797141384]
VOLUNTEER_ID = []
DIRECTOR_ID = []
GARANT_ID = []
SLITOscam = 0
zayavki = 0

bot = telebot.TeleBot(API_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('angel_database.txt', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
cursor.execute('''
CREATE TABLE IF NOT EXISTS admins (
    user_id INTEGER PRIMARY KEY
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS guarantees (
    user_id INTEGER PRIMARY KEY
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS scammers (
    user_id INTEGER PRIMARY KEY,
    evidence TEXT,
    reason TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS volunteer (
    user_id INTEGER PRIMARY KEY
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS director (
    user_id INTEGER PRIMARY KEY
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS bans (
    user_id INTEGER,
    time INTEGER,
    reason TEXT,
    PRIMARY KEY (user_id, time)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS mutes (
    user_id INTEGER,
    reason TEXT,
    time INTEGER,
    PRIMARY KEY (user_id, time)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS zayavki (
    user_id INTEGER,
    count INTEGER,
    PRIMARY KEY (user_id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS slito_scam (
    user_id INTEGER,
    count INTEGER,
    PRIMARY KEY (user_id)
)
''')

conn.commit()

reports = {}

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, 
                 """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
                 /check (—é–∑–µ—ÄID) - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é
                 /checkmy - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å
                 /noscam (—é–∑–µ—ÄID) (–ø—Ä–∏—á–∏–Ω–∞) - –£–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã
                 /scam (—é–∑–µ—Ä–Ω–µ–π–º) (–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞) (–ø—Ä–∏—á–∏–Ω–∞/–≤–æ–∑–º–æ–∂–Ω—ã–π —Å–∫–∞–º) - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∫–∞–º –±–∞–∑—É
                 /trust (—é–∑–µ—Ä–Ω–µ–π–º) - –í—ã–¥–∞—Ç—å —Ç—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                 /rank (—é–∑–µ—ÄID) (—Ä–∞–Ω–≥) - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é""")

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID
def get_user_id(param):
    try:
        if param.isdigit():
            return int(param)
        else:
            user = bot.get_chat(param)
            return user.id if user else None
    except Exception:
        return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ
def user_exists(user_id, table):
    cursor.execute(f'SELECT user_id FROM {table} WHERE user_id = ?', (user_id,))
    return cursor.fetchone() is not None

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_user_rank(user_id):
    if user_exists(user_id, 'admins'):
        return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    elif user_exists(user_id, 'guarantees'):
        return '–ì–∞—Ä–∞–Ω—Ç'
    elif user_exists(user_id, 'volunteer'):
        return '–í–æ–ª–æ–Ω—Ç—ë—Ä'
    elif user_exists(user_id, 'director'):
        return '–î–∏—Ä–µ–∫—Ç–æ—Ä'
    elif user_exists(user_id, 'scammers'):
        return '–°–∫–∞–º–º–µ—Ä'
    elif user_exists(user_id, 'slito_scam'):
        return '–í–æ–∑–º–æ–∂–Ω—ã–π —Å–∫–∞–º–º–µ—Ä'
    elif user_id in OWNER_ID:
        return '–í–ª–∞–¥–µ–ª–µ—Ü'
    return '–ù–µ—Ç—É –≤ –±–∞–∑–µ'

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–∞–º–º–µ—Ä–µ
def get_scammers_info(user_id):
    cursor.execute('SELECT evidence, reason FROM scammers WHERE user_id = ?', (user_id,))
    row = cursor.fetchone()
    return row if row else (None, None)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–∏—Ç—ã—Ö —Å–∫–∞–º–º–µ—Ä–æ–≤
def get_slitoscammerov(user_id):
    cursor.execute('SELECT count FROM slito_scam WHERE user_id = ?', (user_id,))
    row = cursor.fetchone()
    return row[0] if row else 0

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
def check_if_in_database(user_id):
    if user_exists(user_id, 'admins') or user_exists(user_id, 'guarantees') or user_exists(user_id, 'volunteer') or user_exists(user_id, 'director') or user_exists(user_id, 'scammers'):
        return True
    return False

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–º–º–µ—Ä–∞ –≤ –±–∞–∑—É
def add_to_scammers(user_id, evidence, reason, rank):
    cursor.execute('INSERT INTO scammers (user_id, evidence, reason) VALUES (?, ?, ?)', (user_id, evidence, reason))
    conn.commit()

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
def remove_user(user_id):
    cursor.execute('DELETE FROM admins WHERE user_id = ?', (user_id,))
    cursor.execute('DELETE FROM guarantees WHERE user_id = ?', (user_id,))
    cursor.execute('DELETE FROM scammers WHERE user_id = ?', (user_id,))
    cursor.execute('DELETE FROM volunteer WHERE user_id = ?', (user_id,))
    cursor.execute('DELETE FROM director WHERE user_id = ?', (user_id,))
    cursor.execute('DELETE FROM zayavki WHERE user_id = ?', (user_id,))
    cursor.execute('DELETE FROM slito_scam WHERE user_id = ?', (user_id,))
    conn.commit()

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def remove_from_guarantees(user_id):
    cursor.execute('DELETE FROM guarantees WHERE user_id = ?', (user_id,))
    conn.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–∞—Ä–∞–Ω—Ç–∏–∏
def add_to_guarantees(user_id):
    cursor.execute('INSERT INTO guarantees (user_id) VALUES (?)', (user_id,))
    conn.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def add_admin(user_id):
    cursor.execute('INSERT INTO admins (user_id) VALUES (?)', (user_id,))
    conn.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞
def add_volunteer(user_id):
    cursor.execute('INSERT INTO volunteer (user_id) VALUES (?)', (user_id,))
    conn.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
def add_director(user_id):
    cursor.execute('INSERT INTO director (user_id) VALUES (?)', (user_id,))
    conn.commit()

@bot.message_handler(commands=['check'])
def cmd_check(message):
    args = message.text.split()[1:]
    if len(args) < 1:
        bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.')
        return
    
    check_user_id = get_user_id(args[0])
    if check_user_id is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    rank = check_user_rank(check_user_id)
    
    slitoscammerov = get_slitoscammerov(check_user_id)
    iskalivbase = check_if_in_database(check_user_id)

    if check_user_id in get_guarantees():
        bot.send_photo(message.chat.id, 'https://imageup.ru/img205/4967023/1000012384.jpg', caption=f"""
üÜî Id: {check_user_id}
üîÅ –†–µ–ø—É—Ç–∞—Ü–∏—è: –ì–∞—Ä–∞–Ω—Ç
–®–∞–Ω—Å —Å–∫–∞–º–∞: 0%
üöÆ –°–ª–∏—Ç–æ –°–∫–∞–º–µ—Ä–æ–≤: {slitoscammerov}
üîç –ò—Å–∫–∞–ª–∏ –≤ –±–∞–∑–µ: {iskalivbase}
‚úÖ Greenlight Base
""")
        return

    if rank == '–°–∫–∞–º–º–µ—Ä':
        evidence, reason = get_scammers_info(check_user_id)
        bot.send_photo(message.chat.id, 'https://imageup.ru/img298/4967024/1000012382.jpg', caption=f"""
üÜî Id: {check_user_id}
üîÅ –†–µ–ø—É—Ç–∞—Ü–∏—è: {rank}
‚ùó –®–∞–Ω—Å —Å–∫–∞–º–∞: 99%
üìù –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {evidence}
üìã –ü—Ä–∏—á–∏–Ω–∞: {reason}
üîç –ò—Å–∫–∞–ª–∏ –≤ –±–∞–∑–µ: {iskalivbase}
‚úÖ Greenlight Base
""")
    elif rank == '–í–æ–∑–º–æ–∂–Ω—ã–π —Å–∫–∞–º–º–µ—Ä':
        evidence, reason = get_scammers_info(check_user_id)
        bot.send_photo(message.chat.id, 'https://imageup.ru/img92/4967025/1000012385.jpg', caption=f"""
üÜî Id: {check_user_id}
üîÅ –†–µ–ø—É—Ç–∞—Ü–∏—è: {rank}
‚ùó –®–∞–Ω—Å —Å–∫–∞–º–∞: 70%
üìù –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {evidence}
üìã –ü—Ä–∏—á–∏–Ω–∞: {reason}
üîç –ò—Å–∫–∞–ª–∏ –≤ –±–∞–∑–µ: {iskalivbase}
‚úÖ Greenlight Base
""")
    elif rank == '–í–ª–∞–¥–µ–ª–µ—Ü':
        bot.send_photo(message.chat.id, 'https://imageup.ru/img31/4967021/1000012386.jpg', caption=f"""
üÜî Id: {check_user_id}
üîÅ –†–µ–ø—É—Ç–∞—Ü–∏—è: {rank}
–®–∞–Ω—Å —Å–∫–∞–º–∞: 0%
üöÆ –ó–∞—è–≤–∫–∏: {zayavki}
üîç –ò—Å–∫–∞–ª–∏ –≤ –±–∞–∑–µ: {iskalivbase}
‚úÖ Greenlight Base
""")
    elif rank in ['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–î–∏—Ä–µ–∫—Ç–æ—Ä', '–í–æ–ª–æ–Ω—Ç—ë—Ä']:
        bot.send_photo(message.chat.id, 'https://imageup.ru/img31/4967021/1000012386.jpg', caption=f"""
üÜî Id: {check_user_id}
üîÅ –†–µ–ø—É—Ç–∞—Ü–∏—è: {rank}
–®–∞–Ω—Å —Å–∫–∞–º–∞: 0%
üöÆ –ó–∞—è–≤–∫–∏: {zayavki if rank in ['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–î–∏—Ä–µ–∫—Ç–æ—Ä'] else slitoscammerov}
üîç –ò—Å–∫–∞–ª–∏ –≤ –±–∞–∑–µ: {iskalivbase}
‚úÖ Greenlight Base
""")
    else:
        bot.send_photo(message.chat.id, 'https://imageup.ru/img1/4967020/1000012383.jpg', caption=f"""
–ù–µ—Ç—É –≤ –±–∞–∑–µ:
üÜî Id: {check_user_id}
üîÅ –†–µ–ø—É—Ç–∞—Ü–∏—è: –ù–µ—Ç—É –≤ –±–∞–∑–µ
‚ùì –®–∞–Ω—Å —Å–∫–∞–º–∞: 50%
üöÆ –°–ª–∏—Ç–æ –°–∫–∞–º–µ—Ä–æ–≤: {slitoscammerov}
üîç –ò—Å–∫–∞–ª–∏ –≤ –±–∞–∑–µ: {iskalivbase}
‚úÖ Greenlight Base
""")

@bot.message_handler(commands=['checkmy'])
def cmd_check_my_status(message):
    user_id = message.from_user.id
    
    if user_id in get_guarantees():
        slitoscammerov = get_slitoscammerov(user_id)
        bot.send_photo(message.chat.id, 'https://imageup.ru/img205/4967023/1000012384.jpg', caption=f"""
üÜî Id: {user_id}
üîÅ –†–µ–ø—É—Ç–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–µ–Ω –≥–∞—Ä–∞–Ω—Ç–æ–º
–®–∞–Ω—Å —Å–∫–∞–º–∞: 0%
üöÆ –°–ª–∏—Ç–æ –°–∫–∞–º–µ—Ä–æ–≤: {slitoscammerov}
üîç –ò—Å–∫–∞–ª–∏ –≤ –±–∞–∑–µ: {check_if_in_database(user_id)}
‚úÖ Greenlight Base
""")
        return

    rank = check_user_rank(user_id)
    slitoscammerov = get_slitoscammerov(user_id)
    iskalivbase = check_if_in_database(user_id)

    if rank == '–í–ª–∞–¥–µ–ª–µ—Ü':
        bot.send_photo(message.chat.id, 'https://imageup.ru/img31/4967021/1000012386.jpg', caption=f"""
üÜî Id: {user_id}
üîÅ –†–µ–ø—É—Ç–∞—Ü–∏—è: {rank}
–®–∞–Ω—Å —Å–∫–∞–º–∞: 0%
üöÆ –ó–∞—è–≤–∫–∏: {zayavki}
üîç –ò—Å–∫–∞–ª–∏ –≤ –±–∞–∑–µ: {iskalivbase}
‚úÖ Greenlight Base
""")
    elif rank in ['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–î–∏—Ä–µ–∫—Ç–æ—Ä', '–í–æ–ª–æ–Ω—Ç—ë—Ä']:
        bot.send_photo(message.chat.id, 'https://imageup.ru/img154/4967022/1000012388.jpg', caption=f"""
üÜî Id: {user_id}
üîÅ –†–µ–ø—É—Ç–∞—Ü–∏—è: {rank}
–®–∞–Ω—Å —Å–∫–∞–º–∞: 10%
üöÆ –ó–∞—è–≤–∫–∏: {zayavki if rank in ['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–î–∏—Ä–µ–∫—Ç–æ—Ä'] else slitoscammerov}
üîç –ò—Å–∫–∞–ª–∏ –≤ –±–∞–∑–µ: {iskalivbase}
‚úÖ Greenlight Base
""")
    elif rank == '–°–∫–∞–º–º–µ—Ä':
        evidence, reason = get_scammers_info(user_id)
        bot.send_photo(message.chat.id, 'https://imageup.ru/img298/4967024/1000012382.jpg', caption=f"""
üÜî Id: {user_id}
üîÅ –†–µ–ø—É—Ç–∞—Ü–∏—è: {rank}
‚ùó –®–∞–Ω—Å —Å–∫–∞–º–∞: 99%
üìù –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {evidence}
üìã –ü—Ä–∏—á–∏–Ω–∞: {reason}
üîç –ò—Å–∫–∞–ª–∏ –≤ –±–∞–∑–µ: {iskalivbase}
‚úÖ Greenlight Base
""")
    elif rank == '–í–æ–∑–º–æ–∂–Ω—ã–π —Å–∫–∞–º–º–µ—Ä':
        evidence, reason = get_scammers_info(user_id)
        bot.send_photo(message.chat.id, 'https://imageup.ru/img92/4967025/1000012385.jpg', caption=f"""
üÜî Id: {user_id}
üîÅ –†–µ–ø—É—Ç–∞—Ü–∏—è: {rank}
‚ùó –®–∞–Ω—Å —Å–∫–∞–º–∞: 70%
üìù –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {evidence}
üìã –ü—Ä–∏—á–∏–Ω–∞: {reason}
üîç –ò—Å–∫–∞–ª–∏ –≤ –±–∞–∑–µ: {iskalivbase}
‚úÖ Greenlight Base
""")
    else:
        bot.send_photo(message.chat.id, 'https://imageup.ru/img1/4967020/1000012383.jpg', caption=f"""
–ù–µ—Ç—É –≤ –±–∞–∑–µ:
üÜî Id: {user_id}
üîÅ –†–µ–ø—É—Ç–∞—Ü–∏—è: –ù–µ—Ç—É –≤ –±–∞–∑–µ
‚ùì –®–∞–Ω—Å —Å–∫–∞–º–∞: 50%
üöÆ –°–ª–∏—Ç–æ –°–∫–∞–º–µ—Ä–æ–≤: {slitoscammerov}
üîç –ò—Å–∫–∞–ª–∏ –≤ –±–∞–∑–µ: {iskalivbase}
‚úÖ Greenlight Base
""")

@bot.message_handler(commands=['scam'])
def cmd_scam(message):
    if message.from_user.id not in ADMIN_ID and message.from_user.id not in OWNER_ID and message.from_user.id not in VOLUNTEER_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split(maxsplit=3)
    if len(args) < 4:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /scam (—é–∑–µ—Ä–Ω–µ–π–º) (–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞) (–ø—Ä–∏—á–∏–Ω–∞/–≤–æ–∑–º–æ–∂–Ω—ã–π —Å–∫–∞–º)')
        return

    username = args[1]
    evidence = args[2]
    reason = args[3]

    scam_user_id = get_user_id(username)
    if scam_user_id is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    if '–≤–æ–∑–º–æ–∂–Ω—ã–π —Å–∫–∞–º' in reason.lower():
        rank = '–í–æ–∑–º–æ–∂–Ω—ã–π —Å–∫–∞–º–º–µ—Ä'
    else:
        rank = '–°–∫–∞–º–º–µ—Ä'

    add_to_scammers(scam_user_id, evidence, reason, rank)

    bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {scam_user_id}) –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É —Å–∫–∞–º–µ—Ä–æ–≤ –∫–∞–∫ {rank}.\n–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {evidence}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}')

@bot.message_handler(commands=['noscam'])
def cmd_noscam(message):
    if message.from_user.id not in ADMIN_ID and message.from_user.id not in OWNER_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 2:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /noscam (—é–∑–µ—ÄID) (–ø—Ä–∏—á–∏–Ω–∞)')
        return

    del_user_id = get_user_id(args[0])
    if del_user_id is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    remove_user(del_user_id)
    bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {del_user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã. –ü—Ä–∏—á–∏–Ω–∞: {" ".join(args[1:])}.')

@bot.message_handler(commands=['trust'])
def cmd_revoke_trust(message):
    if message.from_user.id not in GARANT_ID and message.from_user.id not in OWNER_ID:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 1:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /trust (—é–∑–µ—Ä–Ω–µ–π–º)')
        return

    username = args[0]
    revoke_user_id = get_user_id(username)
    if revoke_user_id is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    if revoke_user_id not in get_guarantees():
        bot.reply_to(message, '–£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç—Ä–∞—Å—Ç–∞.')
        return

    remove_from_guarantees(revoke_user_id)
    bot.reply_to(message, f'–¢—Ä–∞—Å—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {revoke_user_id}) –∑–∞–±—Ä–∞–Ω.')

@bot.message_handler(commands=['rank'])
def cmd_set_rank(message):
    if message.from_user.id not in OWNER_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = message.text.split()[1:]
    if len(args) < 2:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rank (—é–∑–µ—ÄID) (—Ä–∞–Ω–≥)')
        return

    user_id = get_user_id(args[0])
    if user_id is None:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.')
        return

    rank = args[1].lower()
    valid_ranks = ['—Å–∫–∞–º–µ—Ä', '–≥–∞—Ä–∞–Ω—Ç', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–≤–æ–ª–æ–Ω—Ç—ë—Ä', '–¥–∏—Ä–µ–∫—Ç–æ—Ä', '–≤–ª–∞–¥–µ–ª–µ—Ü']
    if rank not in valid_ranks:
        bot.reply_to(message, f'–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–Ω–≥. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–Ω–≥–∏: {", ".join(valid_ranks)}.')
        return

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å.
    if rank == '–≥–∞—Ä–∞–Ω—Ç':
        add_to_guarantees(user_id)
    elif rank == '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        add_admin(user_id)
    elif rank == '–≤–æ–ª–æ–Ω—Ç—ë—Ä':
        add_volunteer(user_id)
    elif rank == '–¥–∏—Ä–µ–∫—Ç–æ—Ä':
        add_director(user_id)
    elif rank == '–≤–ª–∞–¥–µ–ª–µ—Ü':
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞, –µ—Å–ª–∏ —Ç–∞–∫–∞—è —Ç—Ä–µ–±—É–µ—Ç—Å—è
        pass

    bot.reply_to(message, f'–†–∞–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {rank}.')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"An error occurred: {e}")
